# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:18:11+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union
from uuid import UUID

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path

from models import (
    AccountDetail,
    AccountsGetResponse,
    AddHostHeaderRequest,
    AddSshKeyRequest,
    AddSubsiteRequest,
    AssetType,
    AutoForward,
    AutoRedirectConfig,
    AutoReply,
    BadRequestResponse,
    CreateAccount,
    CreateAliasRequest,
    CreateCatchAllRequest,
    CreateMailboxRequest,
    CreateMySqlDatabase,
    CreateMySqlUser,
    CreateSmtpDomainRequest,
    CreateSslCertificateRequest,
    DnsDomainNameRecordsGetResponse,
    DnsRecord,
    DomainDetail,
    DomainsGetResponse,
    EditDomainWillRenewRequest,
    EditNameServers,
    FtpConfiguration,
    GzipConfig,
    Http2Configuration,
    LetsEncryptConfig,
    LinuxHostingDetail,
    LinuxhostingsDomainNamePhpsettingsAvailableversionsGetResponse,
    LinuxhostingsDomainNameScheduledtasksGetResponse,
    LinuxhostingsDomainNameSshKeysGetResponse,
    LinuxhostingsGetResponse,
    MailboxDetail,
    MailboxesGetResponse,
    MailZone,
    MySqlDatabase,
    MysqldatabasesDatabaseNameUsersGetResponse,
    MysqldatabasesGetResponse,
    PhpVersion,
    ProvisioningJobCompletion,
    ProvisioningJobInfo,
    RegisterDomain,
    ScheduledTask,
    ServicepacksGetResponse,
    SshConfiguration,
    SshGetResponse,
    SslCertificateDetail,
    SslCertificateFileFormat,
    SslCertificateRequestDetail,
    SslcertificaterequestsGetResponse,
    SslcertificatesGetResponse,
    TransferDomain,
    UpdateAliasRequest,
    UpdateAntiSpamRequest,
    UpdateMailboxPasswordRequest,
    UpdatePhpAPcuRequest,
    UpdatePhpMemoryLimitRequest,
    UpdateSmtpDomainRequest,
    UpdateUserPasswordRequest,
    UpdateUserStatusRequest,
    WindowsHostingDetail,
    WindowshostingsGetResponse,
)

app = MCPProxy(
    description='# Introduction\n\nThis API allows resellers to manage their resources in a simple, programmatic way using HTTP requests.\n\n# Conventions\n\n## Requests\n\nThe API supports different methods depending on the required action.\n\n| Method\t| Description\n| ---\t\t| ---\n| GET\t\t| Retrieve resources in a collection or get a single resource.<br/>Getters will never have any effect on the queried resources.\n| POST\t\t| Create a new resource in a collection.\n| PUT\t\t| Update an existing resource with its new representation.\n| DELETE\t| Delete an existing resource.\n\n## HTTP status codes\n\nThe API will reply with different HTTP statuscodes:\n\n| StatusCode\t\t\t\t| Description\n| ---\t\t\t\t\t\t| ---\n| 200 OK\t\t\t\t\t| The requests was processed and you receive data as a result.\n| 201 CREATED\t\t\t\t| The resource has been created. Either the Location header contains a link to the created resource, or links are being returned in the response body. The applied method will be indicated in the documentation.\n| 202 ACCEPTED\t\t\t\t| The request has been validated and accepted. Because we need to do some background processing prior to returning the result, we cannot send back a useful representation.\n| 204 NOCONTENT\t\t\t\t| The request has been processed, but no details can be returned.\n| 400 BADREQUEST\t\t\t| Your request is malformed.\n| 401 UNAUTHORIZED\t\t\t| You are not authorized. Follow the instructions in the Authorization documentation.\n| 403 FORBIDDEN\t\t\t\t| Access to the resource or operation is not allowed.\n| 404 NOTFOUND\t\t\t\t| The resource cannot be found.\n| 410 GONE                  | The resource is permanently no longer available.\n| 429 TOOMANYREQUESTS\t\t| The ratelimit has been exceeded. Please refer to the documentation on rate limiting for more details.\n| 500 INTERNALSERVERERROR\t| An error occurred during the processing of the request. The error is unexpected and most likely due to a bug in the api.\n\nIn the event of a problem, the body of the response will usually contain an errorcode and errormessage.\nIn rare cases additional details about the error are reported.\n\nErrorcodes 400-499 are considered to be client errors and indicate that there was an issue with the request.\nWe will not take any action besides monitoring. \n\nErrorcodes 500-599 are considered to be server errors. The errors are monitored AND action will be taken to resolve the error.\n\n## Formatting\n\nSnake casing is applied on resources and query parameters.\nThe API is strictly returning JSON. No other formats are supported.\n\nDatetimes are returned in ISO-8601 format.\n\n## Pagination\n\nPagination is on by default on collections and is controlled by specifying *skip* and *take* parameters.  \n**Skip** indicates the number of results to skip and where to start the new take.  \n**Take** indicates the number of records to return. The returned number of items can be smaller than the requested take.\n\nPaged results will have headers with useful information regarding the paging.\n\n| Header\t\t\t\t| Description\n| ---\t\t\t\t\t| ---\n| X-Paging-Skipped\t\t| The number of results that have been skipped.\n| X-Paging-Take\t\t\t| The number of items in the current take. The number might differ from the requested take. It represents the actual number of items returned in the response.\n| X-Paging-TotalResults | The total number of results regardless of paging.\n\n## Rate limiting\n\nThe number of requests per interval is limited. Detailed information on the rate limiting can be found in specific headers which will be sent on each request.\n\n| Header\t\t\t\t| Description\n| ---\t\t\t\t\t| ---\n| X-RateLimit-Limit\t\t| The number of requests that can be made in a specific time interval.\n| X-RateLimit-Usage\t\t| The number of requests already made in the current time interval.\n| X-RateLimit-Remaining\t| The number of requests remaining until the reset.\n| X-RateLimit-Reset\t\t| The number of seconds until the reset.<br />After the reset you are allowed to make as many requests as specified by the X-RateLimit-Limit header.\n| Retry-After\t\t\t| The number of seconds you have to wait until you can make new requests.<br />This header is only present when the rate limit has been reached. It is identical to X-RateLimit-Reset.\n\nWhen the ratelimit has been reached, all requests will return with a HTTP statuscode 429 and ReasonPhrase \'*Too many requests, retry later.*\'.\n\n# Authentication\n\nThe Api uses HMAC authentication.  \nHash-based message authentication code (HMAC) is a mechanism for calculating a message authentication code involving a hash function in combination with a secret key.  \nBoth the integrity and the authenticity of the message are verified this way.\n\n## Steps to generate the HMAC\n\n1. Get your api key and secret from your controlpanel.  \nIt is absolutely vital that the secret is never exposed. Once the secret is out, anyone would be able to generate hmacs to impersonate you.  \nIn case your secret is compromised, you can generate a new api key and secret on your controlpanel.\n2. Construct the input value for generating the hmac.  \nConcatenate:apikey, request method, path and querystring information, unix timestamp, nonce and content.\n\n|\t\t\t\t\t\t\t\t\t\t| Description\n| ---\t\t\t\t\t\t\t\t\t| ---\n| apikey\t\t\t\t\t\t\t\t| The key that is linked to your user.\n| request method\t\t\t\t\t\t| lowercased (eg: get, post, delete,...)\n| path and querystring information\t\t| urlencoding of the lowercased relative path and querystring.<br />The path **MUST start with the api version (/v2)**.<br />The hexadecimal codes (percent encoding) MUST be uppercased.\n| unix timestamp\t\t\t\t\t\t| the unix timestamp in **seconds**.\n| nonce\t\t\t\t\t\t\t\t\t| a\tunique string for each request. It should be a random string, not related to the request. The nonce (in combination with the unix timestamp) protects you from replay attacks in case anyone was able to intercept a request.\n| content\t\t\t\t\t\t\t\t| When the request body is not empty, this should be the Base64 encoded Md5 hash of the request body.<br />An empty body should not be encoded.\n\n3. Hash the concatenated string using your api secret and the SHA-256 algorithm.\n4. Base64 encode the result of the hash function. This is the hmac signature you will need to send an authorized request.\n\n## Sending an authorized request\n\nAn authorized request can be made by sending the generated HMAC in the authorization header.  \nA correct authorizationheader uses the hmac authorization scheme and a correctly formatted authorization parameter.\n\nCreate the authorization parameter by concatenating:\n  * apikey\n  * colon \':\'\n  * generated HMAC signature (see above)\n  * colon \':\'\n  * nonce (the one used to generate the signature)\n  * colon \':\'\n  * unix timestamp (the one used to generate the signature)\n\nA sample (illustrated):\n\n* The first line is the string you create to feed to the hashing algorithm.\n* The second line is the authorization header that should be sent in the request.\n\n![hmac authorization header illustrated](/v2/images/authentication_illustration.jpg "authorization header illustrated")\n\n## IP whitelisting\n\nAccess is by default restricted for all IP addresses. You need to explicitly whitelist an IP or an IP range in your controlpanel.\n\n# Versioning\n\nBecause of breaking contract changes compared to v1, we released v2 of the API.  \nV1 will still be available, but you are strongly encouraged to migrate to the latest version.  \nNew features will only be available on v2.\n\n# Policy\n\n### Fair use policy\n\nPlease respect the rate limits and do not use the api for any purposes of abuse.  \nAll requests are being monitored and logged.  \nIntentional abuse might result in api key revocation.\n\n# Errors\n\nThe API attempts to return appropriate HTTP status codes for every request.  \nWhen the status code indicates failure, the API will also provide an error message in most cases.\n\nAn error message contains a machine-parseable error code accompanied by a descriptive error text.  \nThe text for an error message might change over time, but codes will stay the same.\n\n[An overview of error codes can be found here](/v2/documentation/errorcodes).\n\n# Change log\n\n[An overview of new changes can be found here](/v2/documentation/changelog).\n\n# Provisioning information\n\n## Terminology\n\n| Term\t\t\t| Definition\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| ---\t\t\t| ---\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|\n| Servicepack\t| Defines a set of assets that belong together. An example is a hosting package which offers Linux hosting, a domain name, a couple of mailboxes and databases.<br/>It also limits the size of individual assets within the same account. |\n| Account\t\t| Represents an instance of the servicepack. It contains one or more assets. The number and size of assets is defined by the servicepack. |\n| Asset\t\t\t| A manageable service. For example: a mysql database, a linux hosting, a mailbox,...<br/>Some assets are created at the moment when the account is created. Other assets can be created afterwards.\n\t\n## Common provisioning scenario\n\n**Provisioning of an account with Linux hosting with one MySql database**\n\n*Without a pre-existing account:*\n\n1. Create a new account.<br/>Perform a POST on the accounts route and provide the desired servicepack id and identifier (domain name).\n2. Read the Location header from the response and perform a GET of the provided resource (a provisioning job).\n3. When the response returns 200(OK), you should repeat the GET operation after a certain interval (Repeat this step).<br/>\nWhen the response returns 201(Created), you should read the response body. This will contain links to the created resources.<br/>\nThis will usually hold only one link, but to be futureproof, this has been designed to return a collection.\n4. The created resource will point to an account. You now know the account\'s Id and can continue with the provisioning of a MySql database on this account.\n5. Perform a POST on the mysqldatabases route and provide the account id along with other requested information.\n6. Read the Location header from the response and perform a GET of the provided resource (a provisioning job).\n7. When the response returns 200(OK), you should repeat the GET operation after a certain interval (Repeat this step).<br/>\nWhen the response returns 201(Created), you should read the response body. This will contain links to the created resources.<br/>\nThis will usually hold only one link, but to be futureproof, this has been designed to return a collection.\n8. The created resource will point to a MySql database resource.\n\n## SSL certificate requests\n\n**Requesting an SSL certificate causes the purchase of a paying product.**\n\n1. A certificate is created by adding an ssl certificate request.\n2. Upon statuscode 201 you should query for certificate completion on the resource provided in the location response header.\n3. The resource request can respond with different statuscodes:\n<ul>\n    <li>200: the certificate request is ongoing.<br/>\nCheck the validations collection for validation values that are not auto_validated. Those should be set by you system.<br/>\nCall verify domain validations once all validation values are in place. It might take some time for verification to take place. It is not necessary to call this method more than once.</li>\n    <li>303: the certificate request is complete; there is no more certificate request resource available. Check the location header value to retrieve the representation of the resulting ssl certificate.</li>\n    <li>410: the certificate request does not exist anymore, there is no certificate created as a result of the request.</li>\n</ul>',
    title='Public Api',
    version='v2',
    servers=[{'url': '/v2'}],
)


@app.get('/accounts', tags=['account_management'])
def get_accounts(
    skip: Optional[int] = None,
    take: Optional[int] = None,
    asset_type: Optional[AssetType] = None,
    identifier: Optional[str] = None,
):
    """
    Overview of accounts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts',
    description=""" The creation of an account requires some background processing. There is no instant feedback of the creation status. """,
    tags=['account_management'],
)
def create_account(body: CreateAccount = None):
    """
    Create a new account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/accounts/{accountId}', tags=['account_management'])
def get_account(account_id: Union[int, str, str, str]):
    """
    Get a specific account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dns/{domainName}/records', tags=['dns_record_management', 'domain_management']
)
def get_dns__domain_name_records(
    domain_name: Union[str, str, str, str],
    skip: Optional[int] = None,
    take: Optional[int] = None,
    type: Optional[str] = None,
    record_name: Optional[str] = None,
    service: Optional[str] = None,
):
    """
    Get records
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dns/{domainName}/records', tags=['dns_record_management', 'domain_management']
)
def post_dns__domain_name_records(
    domain_name: Union[str, str, str, str], body: DnsRecord = None
):
    """
    Create a record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/dns/{domainName}/records/{recordId}',
    tags=['dns_record_management', 'domain_management'],
)
def delete_dns__domain_name_records__record_id(
    domain_name: Union[str, str, str, str], record_id: Union[str, str, str, str] = ...
):
    """
    Delete a record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dns/{domainName}/records/{recordId}',
    tags=['dns_record_management', 'domain_management'],
)
def get_dns__domain_name_records__record_id(
    domain_name: Union[str, str, str, str], record_id: Union[str, str, str, str] = ...
):
    """
    Get specific record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/dns/{domainName}/records/{recordId}',
    tags=['dns_record_management', 'domain_management'],
)
def put_dns__domain_name_records__record_id(
    domain_name: Union[str, str, str, str],
    record_id: Union[str, str, str, str] = ...,
    body: DnsRecord = None,
):
    """
    Edit a record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/domains', tags=['domain_management', 'dns_record_management'])
def get_domains(skip: Optional[int] = None, take: Optional[int] = None):
    """
    Overviews of domains
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/domains/registrations',
    description=""" Registers an available domain.<br />Domain names with extension '.ca' are only available for registrants with country code 'CA'. """,
    tags=['domain_management'],
)
def register(body: RegisterDomain = None):
    """
    Register a domain
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/domains/transfers',
    description=""" Transfers a domain with a transfer authorization code.<br />Domain names with extension '.ca' are only available for registrants with country code 'CA'. """,
    tags=['domain_management'],
)
def transfer(body: TransferDomain = None):
    """
    Transfer a domain
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/domains/{domainName}', tags=['domain_management', 'dns_record_management'])
def get_domain(domain_name: Union[str, str, str, str]):
    """
    Details of a domain
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/domains/{domainName}/nameservers',
    tags=['dns_record_management', 'domain_management'],
)
def edit_name_servers(
    domain_name: Union[str, str, str, str], body: EditNameServers = None
):
    """
    Edit domain name servers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/domains/{domainName}/renew',
    description=""" Allowed if can_toggle_renew is true on the domain detail:<br /><ul><li>If there are no unpaid invoices for the domain name anymore.</li><li>If the renewal won't start within 1 month.</li></ul>
Allowed if the requesting user has the finance role. """,
    tags=['domain_management'],
)
def configure_domain(
    domain_name: Union[str, str, str, str], body: EditDomainWillRenewRequest = None
):
    """
    Edit domain name renew state
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/linuxhostings', tags=['linux_hosting_management'])
def get_linux_hostings(skip: Optional[int] = None, take: Optional[int] = None):
    """
    Overview of linux hostings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/linuxhostings/{domainName}',
    tags=['linux_hosting_management', 'domain_management'],
)
def get_linux_hosting(domain_name: Union[str, str, str, str]):
    """
    Linux hosting detail
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/linuxhostings/{domainName}/ftp/configuration',
    tags=['domain_management', 'linux_hosting_management'],
)
def configure_ftp(
    domain_name: Union[str, str, str, str], body: FtpConfiguration = None
):
    """
    Configure FTP
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/linuxhostings/{domainName}/phpsettings/apcu',
    tags=['php_configuration', 'domain_management'],
)
def change_apcu(
    domain_name: Union[str, str, str, str], body: UpdatePhpAPcuRequest = None
):
    """
    Configure PHP APCu setting
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/linuxhostings/{domainName}/phpsettings/availableversions',
    tags=['php_configuration', 'linux_hosting_management'],
)
def get_available_php_versions(domain_name: Union[str, str, str, str]):
    """
    Get the available PHP versions.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/linuxhostings/{domainName}/phpsettings/memorylimit',
    tags=['php_configuration', 'linux_hosting_management'],
)
def change_php_memory_limit(
    domain_name: Union[str, str, str, str], body: UpdatePhpMemoryLimitRequest = None
):
    """
    Configure PHP memory limit
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/linuxhostings/{domainName}/phpsettings/version',
    tags=['linux_hosting_management', 'php_configuration'],
)
def change_php_version(domain_name: Union[str, str, str, str], body: PhpVersion = None):
    """
    Change the Linux hosting PHP version.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/linuxhostings/{domainName}/scheduledtasks',
    description=""" Manage scheduled tasks which are also manageable via the control panel. """,
    tags=['scheduled_task_management', 'domain_management'],
)
def get_scheduled_tasks(domain_name: Union[str, str, str, str]):
    """
    Overview of scheduled tasks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/linuxhostings/{domainName}/scheduledtasks', tags=['scheduled_task_management']
)
def add_scheduled_tasks(
    domain_name: Union[str, str, str, str], body: ScheduledTask = None
):
    """
    Add a scheduled task
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/linuxhostings/{domainName}/scheduledtasks/{scheduledTaskId}',
    tags=['scheduled_task_management'],
)
def delete_scheduled_task(
    domain_name: Union[str, str, str, str],
    scheduled_task_id: Union[str, str, str, str] = ...,
):
    """
    Delete a scheduled task
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/linuxhostings/{domainName}/scheduledtasks/{scheduledTaskId}',
    tags=['scheduled_task_management', 'domain_management'],
)
def get_scheduled_task(
    domain_name: Union[str, str, str, str],
    scheduled_task_id: Union[str, str, str, str] = ...,
):
    """
    Get scheduled task detail
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/linuxhostings/{domainName}/scheduledtasks/{scheduledTaskId}',
    tags=['scheduled_task_management', 'domain_management'],
)
def configure_scheduled_task(
    domain_name: Union[str, str, str, str],
    scheduled_task_id: Union[str, str, str, str] = ...,
    body: ScheduledTask = None,
):
    """
    Configure a scheduled task
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/linuxhostings/{domainName}/settings/gzipcompression',
    tags=['http_configuration', 'domain_management'],
)
def change_gzip_compression(
    domain_name: Union[str, str, str, str], body: GzipConfig = None
):
    """
    Enable/disable GZIP compression
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/linuxhostings/{domainName}/sites/{siteName}/hostheaders',
    tags=['dns_record_management', 'http_configuration'],
)
def create_host_header(
    domain_name: Union[str, str, str, str],
    site_name: Union[str, str, str, str] = ...,
    body: AddHostHeaderRequest = None,
):
    """
    Create a host header
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/linuxhostings/{domainName}/sites/{siteName}/http2/configuration',
    tags=['http_configuration', 'domain_management'],
)
def configure_http2(
    domain_name: Union[str, str, str, str],
    site_name: Union[str, str, str, str] = ...,
    body: Http2Configuration = None,
):
    """
    Configure HTTP/2
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/linuxhostings/{domainName}/ssh/configuration',
    tags=['ssh_configuration', 'domain_management', 'linux_hosting_management'],
)
def configure_ssh(
    domain_name: Union[str, str, str, str], body: SshConfiguration = None
):
    """
    Configure SSH
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/linuxhostings/{domainName}/ssh/keys',
    tags=['ssh_key_management', 'ssh_key_overview'],
)
def get_ssh_keys(domain_name: Union[str, str, str, str]):
    """
    Overview of SSH keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/linuxhostings/{domainName}/ssh/keys',
    tags=['ssh_key_management', 'ssh_configuration'],
)
def add_ssh_key(domain_name: Union[str, str, str, str], body: AddSshKeyRequest = None):
    """
    Add a SSH key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/linuxhostings/{domainName}/ssh/keys/{fingerprint}',
    tags=['ssh_key_management', 'ssh_configuration'],
)
def delete_ssh_key(domain_name: Union[str, str, str, str], fingerprint: str = ...):
    """
    Delete a SSH key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/linuxhostings/{domainName}/sslsettings/{hostname}/autoredirect',
    tags=['domain_management', 'http_configuration'],
)
def change_auto_redirect(
    domain_name: Union[str, str, str, str],
    hostname: str = ...,
    body: AutoRedirectConfig = None,
):
    """
    Configure auto redirect
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/linuxhostings/{domainName}/sslsettings/{hostname}/letsencrypt',
    tags=['domain_management', 'ssl_certificate_management'],
)
def change_lets_encrypt(
    domain_name: Union[str, str, str, str],
    hostname: str = ...,
    body: LetsEncryptConfig = None,
):
    """
    Configure let's encrypt
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/linuxhostings/{domainName}/subsites',
    tags=['subsite_management', 'domain_management'],
)
def create_subsite(
    domain_name: Union[str, str, str, str], body: AddSubsiteRequest = None
):
    """
    Create a subsite
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/linuxhostings/{domainName}/subsites/{siteName}', tags=['subsite_management']
)
def delete_subsite(
    domain_name: Union[str, str, str, str], site_name: Union[str, str, str, str] = ...
):
    """
    Delete a subsite
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mailboxes',
    description=""" Currently only supports getting the mailboxes filtered by domain name. """,
    tags=['mailbox_management'],
)
def get_mailboxes(domain_name: Optional[str] = None):
    """
    Gets your mailboxes.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/mailboxes', tags=['mailbox_management', 'account_management'])
def create_mailbox(body: CreateMailboxRequest = None):
    """
    Create a new mailbox.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/mailboxes/{mailboxName}', tags=['mailbox_management'])
def delete_mailbox(mailbox_name: Union[str, str, str, str]):
    """
    Delete a mailbox
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/mailboxes/{mailboxName}', tags=['mailbox_management'])
def get_mailbox(mailbox_name: Union[str, str, str, str]):
    """
    Get a specific mailbox
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/mailboxes/{mailboxName}/autoforward', tags=['mailbox_management'])
def configure_mailbox_auto_forward(
    mailbox_name: Union[str, str, str, str], body: AutoForward = None
):
    """
    Configure auto-forward for mailbox
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/mailboxes/{mailboxName}/autoreply', tags=['mailbox_management'])
def configure_mailbox_auto_reply(
    mailbox_name: Union[str, str, str, str], body: AutoReply = None
):
    """
    Configure auto-reply for mailbox
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mailboxes/{mailboxName}/password',
    tags=['account_management', 'mailbox_management'],
)
def change_mailbox_password(
    mailbox_name: Union[str, str, str, str], body: UpdateMailboxPasswordRequest = None
):
    """
    Change password for mailbox
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mailzones/{domainName}',
    tags=[
        'dns_record_management',
        'domain_management',
        'mailbox_management',
        'mail_alias_management',
        'anti_spam_configuration',
    ],
)
def get_mail_zone(domain_name: Union[str, str, str, str]):
    """
    Get the mail zone.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/mailzones/{domainName}/aliases', tags=['mail_alias_management'])
def create_alias(
    domain_name: Union[str, str, str, str], body: CreateAliasRequest = None
):
    """
    Create a new alias
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mailzones/{domainName}/aliases/{emailAddress}', tags=['mail_alias_management']
)
def delete_alias(
    domain_name: Union[str, str, str, str],
    email_address: Union[str, str, str, str] = ...,
):
    """
    Delete a alias
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mailzones/{domainName}/aliases/{emailAddress}',
    tags=['mail_alias_management', 'account_management'],
)
def configure_alias(
    domain_name: Union[str, str, str, str],
    email_address: Union[str, str, str, str] = ...,
    body: UpdateAliasRequest = None,
):
    """
    Configure a alias
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/mailzones/{domainName}/antispam', tags=['anti_spam_configuration'])
def configure_anti_spam(
    domain_name: Union[str, str, str, str], body: UpdateAntiSpamRequest = None
):
    """
    Configure anti-spam for mail zone
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mailzones/{domainName}/catchall',
    tags=['domain_management', 'mail_alias_management', 'mailbox_management'],
)
def create_catch_all(
    domain_name: Union[str, str, str, str], body: CreateCatchAllRequest = None
):
    """
    Create a catch-all on the mail zone
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mailzones/{domainName}/catchall/{emailAddress}',
    tags=['dns_record_management', 'mailbox_management', 'mail_alias_management'],
)
def delete_catch_all(
    domain_name: Union[str, str, str, str],
    email_address: Union[str, str, str, str] = ...,
):
    """
    Delete a catch-all on the mail zone
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mailzones/{domainName}/smtpdomains',
    tags=['smtp_domain_management', 'domain_management'],
)
def create_smtp_domain(
    domain_name: Union[str, str, str, str], body: CreateSmtpDomainRequest = None
):
    """
    Create an extra smtp domain
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mailzones/{domainName}/smtpdomains/{hostname}',
    tags=['smtp_domain_management', 'domain_management'],
)
def delete_smtp_domain(domain_name: Union[str, str, str, str], hostname: str = ...):
    """
    Delete an extra smtp domain
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mailzones/{domainName}/smtpdomains/{hostname}',
    tags=['smtp_domain_management', 'domain_management'],
)
def configure_smtp_domain(
    domain_name: Union[str, str, str, str],
    hostname: str = ...,
    body: UpdateSmtpDomainRequest = None,
):
    """
    Configure an extra smtp domain
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/mysqldatabases', tags=['mysql_database_management'])
def get_my_sql_databases(skip: Optional[int] = None, take: Optional[int] = None):
    """
    Overview of mysql databases
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/mysqldatabases', tags=['mysql_database_management'])
def create_my_sql_database(body: CreateMySqlDatabase = None):
    """
    Create a new mysql database
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/mysqldatabases/{databaseName}', tags=['mysql_database_management'])
def delete_database(database_name: Union[str, str, str, str]):
    """
    Delete a mysql database
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mysqldatabases/{databaseName}',
    tags=['mysql_database_management', 'database_user_management'],
)
def get_my_sql_database(database_name: Union[str, str, str, str]):
    """
    Get a specific database
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mysqldatabases/{databaseName}/users',
    tags=['mysql_user_management', 'account_management', 'database_user_management'],
)
def get_database_users(database_name: Union[str, str, str, str]):
    """
    Overview of mysql users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mysqldatabases/{databaseName}/users',
    description=""" The creation of a new mysql user will result in a user with read_only rights. """,
    tags=['mysql_user_management', 'database_user_management', 'account_management'],
)
def create_my_sql_user(
    database_name: Union[str, str, str, str], body: CreateMySqlUser = None
):
    """
    Create a new mysql user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mysqldatabases/{databaseName}/users/{userName}',
    description=""" The deletion of a mysql user is allowed for users with read_only rights. """,
    tags=['mysql_user_management', 'database_user_management', 'account_management'],
)
def delete_database_user(
    database_name: Union[str, str, str, str], user_name: Union[str, str, str, str] = ...
):
    """
    Delete a mysql user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mysqldatabases/{databaseName}/users/{userName}/password',
    tags=['account_management', 'mysql_user_management', 'database_user_management'],
)
def change_database_user_password(
    database_name: Union[str, str, str, str],
    user_name: Union[str, str, str, str] = ...,
    body: UpdateUserPasswordRequest = None,
):
    """
    Change password for mysql user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mysqldatabases/{databaseName}/users/{userName}/status',
    tags=['mysql_user_management', 'database_user_management'],
)
def change_database_user_status(
    database_name: Union[str, str, str, str],
    user_name: Union[str, str, str, str] = ...,
    body: UpdateUserStatusRequest = None,
):
    """
    Enable/disable mysql user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/provisioningjobs/{jobId}',
    description=""" Provisioning failures may occur. Contact support in the event of a failure or wait for error resolution.<br />
Do NOT retry provisioning until the job reports finished or cancelled. """,
    tags=['provisioning_jobs'],
)
def get_provisioningjobs__job_id(job_id: Union[UUID, str, str, str]):
    """
    Detail of a provisioning job
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/servicepacks', tags=['provisioning_jobs'])
def servicepacks():
    """
    Overview of service packs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/ssh', tags=['ssh_key_management', 'ssh_key_overview'])
def get_all_ssh_keys(skip: Optional[int] = None, take: Optional[int] = None):
    """
    Overview of SSH keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/sslcertificaterequests', tags=['ssl_certificate_management'])
def get_ssl_certificate_requests(
    skip: Optional[int] = None, take: Optional[int] = None
):
    """
    Overview of SSL certificate requests
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sslcertificaterequests',
    description=""" Executing this method causes the purchase of a paying product.<br />
Log on to our website to see your current (renewal) prices or contact our Sales department.<br />
Please note that promotional pricing does not apply for purchases made through our API. """,
    tags=['ssl_certificate_management'],
)
def add_ssl_certificate_request(body: CreateSslCertificateRequest = None):
    """
    Add a SSL certificate request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/sslcertificaterequests/{id}', tags=['ssl_certificate_management'])
def get_ssl_certificate_request(id: int):
    """
    Detail of a SSL certificate request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/sslcertificaterequests/{id}',
    tags=['ssl_certificate_management', 'domain_management'],
)
def verify_ssl_certificate_request_domain_validations(id: int):
    """
    Verify the SSL certificate request domain validations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/sslcertificates', tags=['ssl_certificate_management'])
def get_ssl_certificates(skip: Optional[int] = None, take: Optional[int] = None):
    """
    Overview of SSL certificates
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/sslcertificates/{sha1Fingerprint}', tags=['ssl_certificate_management'])
def get_ssl_certificate(sha1_fingerprint: Union[str, str, str, str]):
    """
    Detail of a SSL certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sslcertificates/{sha1Fingerprint}/download',
    description=""" Returns the certifcate as binary data with the content-type and the filename information in the response headers. """,
    tags=['ssl_certificate_management'],
)
def download_certificate(
    sha1_fingerprint: Union[str, str, str, str],
    file_format: SslCertificateFileFormat = ...,
    password: str = ...,
):
    """
    Download a SSL certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/windowshostings', tags=['windows_hosting_management'])
def get_windows_hostings(skip: Optional[int] = None, take: Optional[int] = None):
    """
    Overview of windows hostings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/windowshostings/{domainName}',
    tags=['windows_hosting_management', 'domain_management'],
)
def get_windows_hosting(domain_name: Union[str, str, str, str]):
    """
    Windows hosting detail
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
